{"version":3,"file":"author-options.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorOptionsElement extends AuthorBaseElement(HTMLElement) {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    this.UTIL.defineProperties({\n      cherryPickedOptions: {\n        private: true\n      },\n\n      form: {\n        readonly: true,\n        get: () => this.parentNode.form\n      },\n\n      displayOptions: {\n        readonly: true,\n        get: () => {\n          let AuthorHTMLOptionsCollection = this.PRIVATE.generateAuthorHTMLOptionsCollectionConstructor()\n          let array = this.options.map(option => option.displayElement)\n          let addFunction = (element, before) => this.addOption(this.PRIVATE.generateOptionObject(element), before)\n          let removeFunction = index => this.removeOptionByIndex(index)\n          return new AuthorHTMLOptionsCollection(array, this.selectedIndex, addFunction, removeFunction)\n        }\n      },\n\n      hoveredIndex: {\n        readonly: true,\n        get: () => this.options.findIndex(option => option.displayElement.hover)\n      },\n\n      isSlave: {\n        private: true,\n        readonly: true,\n        get: () => this.parentNode.localName === 'author-select' || this.parentNode.localName === 'author-datalist'\n      },\n\n      lastSelectedIndex: {\n        private: true\n      },\n\n      multiple: {\n        readonly: true,\n        get: () => this.parentNode.multiple\n      },\n\n      options: {\n        readonly: true,\n        default: []\n      },\n\n      selectedIndices: {\n        readonly: true,\n        get: () => [...this.selectedOptions].map(option => option.index)\n      },\n\n      selectedOptions: {\n        readonly: true,\n        get: () => {\n          let nodes = this.querySelectorAll('[selected]')\n          let AuthorHTMLCollection = this.PRIVATE.generateAuthorHTMLCollectionConstructor()\n          return new AuthorHTMLCollection(nodes)\n        }\n      },\n\n      Selection: {\n        readonly: true,\n        private: true,\n        default: class {\n          constructor (options = []) {\n            this.options = options\n          }\n\n          get displayElements () {\n            return this.options.map(option => option.displayElement)\n          }\n\n          get length () {\n            return this.options.length\n          }\n\n          get first () {\n            return this.options[0]\n          }\n\n          get last () {\n            return this.options[this.options.length - 1]\n          }\n\n          append (option) {\n            this.options.push(option)\n          }\n\n          clear () {\n            this.options = []\n          }\n\n          includes (option) {\n            return this.options.includes(option)\n          }\n\n          prepend (option) {\n            this.options.unshift(option)\n          }\n\n          selectAll () {\n            this.options.forEach(option => option.selected = true)\n          }\n        }\n      },\n\n      selectionStartIndex: {\n        private: true\n      }\n    })\n\n    this.UTIL.definePrivateMethods({\n      arrowDownHandler: evt => {\n        if (!this.multiple) {\n          let { startIndex } = evt.detail\n\n          switch (startIndex) {\n            case this.options.length - 1:\n              return\n\n            default:\n              return this.hoverOption(startIndex + 1)\n          }\n\n          return\n        }\n\n        let { lastSelectedIndex } = this.PRIVATE\n\n        if (lastSelectedIndex === this.options.length - 1) {\n          return\n        }\n\n        return this.emit('option.selected', {\n          index: lastSelectedIndex === null ? 0 : lastSelectedIndex + 1,\n          keyboard: true,\n          shiftKey: evt.detail.shiftKey,\n          ctrlKey: false,\n          metaKey: false\n        })\n      },\n\n      arrowUpHandler: evt => {\n        if (!this.multiple) {\n          let { startIndex } = evt.detail\n\n          switch (startIndex) {\n            case -1:\n            case 0:\n              return\n\n            default:\n              return this.hoverOption(startIndex - 1)\n          }\n\n          return\n        }\n\n        let { lastSelectedIndex } = this.PRIVATE\n\n        if (lastSelectedIndex === 0) {\n          return\n        }\n\n        return this.emit('option.selected', {\n          index: lastSelectedIndex === null ? this.options.length - 1 : lastSelectedIndex - 1,\n          keyboard: true,\n          shiftKey: evt.detail.shiftKey,\n          ctrlKey: false,\n          metaKey: false\n        })\n      },\n\n      diffSelections: (comparator, comparable) => {\n        return comparator.filter(option => !comparable.includes(option))\n      },\n\n      generateAuthorHTMLOptionsCollectionConstructor: () => {\n        let _p = new WeakMap()\n\n        let AuthorHTMLCollection = this.PRIVATE.generateAuthorHTMLCollectionConstructor()\n\n        let AuthorHTMLOptionsCollection = class AuthorHTMLOptionsCollection extends AuthorHTMLCollection {\n          constructor (arr, selectedIndex = -1, add, remove) {\n            super(arr)\n            this.selectedIndex = selectedIndex\n            this.add = add\n            this.remove = remove\n\n            _p.set(this, {arr})\n          }\n\n          [Symbol.toStringTag] () {\n            return 'AuthorHTMLOptionsCollection'\n          }\n        }\n\n        return AuthorHTMLOptionsCollection\n      },\n\n      generateOptgroup: optgroup => {\n        if (!customElements.get('author-optgroup')) {\n          return this.UTIL.throwError({\n            type: 'dependency',\n            vars: { name: 'author-optgroup' }\n          })\n        }\n\n        let surrogate = document.createElement('author-optgroup')\n        surrogate.id = this.UTIL.generateGuid('optgroup')\n\n        let label = optgroup.getAttribute('label')\n\n        if (!label || label.trim() === '') {\n          return this.UTIL.throwError({\n            message: '<optgroup> must have a label attribute!'\n          })\n        }\n\n        surrogate.setAttribute('label', label)\n\n        let options = optgroup.querySelectorAll('option')\n        Array.from(options).forEach(option => {\n          this.addOption(this.PRIVATE.generateOptionObject(option), null, surrogate)\n        })\n\n        return surrogate\n      },\n\n      generateOptionObject: sourceElement => {\n        if (!customElements.get('author-option')) {\n          return this.UTIL.throwError({\n            type: 'dependency',\n            vars: { name: 'author-option' }\n          })\n        }\n\n        let OptionConstructor = this.PRIVATE.generateOptionConstructor()\n        return new OptionConstructor(this, this.UTIL.generateGuid(), sourceElement, document.createElement('author-option'))\n      },\n\n      generateOptionConstructor: () => {\n        let _p = new WeakMap()\n\n        return class AuthorOptionObject {\n          constructor (parent, key, sourceElement, displayElement) {\n            this.key = key\n            this.form = parent.form\n            this.defaultSelected = sourceElement.selected\n\n            this.sourceElement = sourceElement\n            this.displayElement = displayElement\n            this.displayElement.parent = parent\n            this.displayElement.selected = sourceElement.selected\n            this.displayElement.defaultSelected = sourceElement.selected\n            this.displayElement.innerHTML = sourceElement.innerHTML\n\n            // Add additional attributes\n            Array.from(sourceElement.attributes).forEach(attr => {\n              if (typeof attr.value === 'boolean') {\n                return attr.value ? this.displayElement.setAttribute(attr.name, '') : this.displayElement.removeAttribute(attr.name)\n              }\n\n              this.displayElement.setAttribute(attr.name, attr.value)\n            })\n\n            _p.set(this, {\n              attributes: {\n                disabled: sourceElement.disabled,\n                id: sourceElement.getAttribute('id'),\n                label: sourceElement.getAttribute('label') || sourceElement.textContent.trim(),\n                selected: sourceElement.selected,\n                value: sourceElement.hasAttribute('value') ? sourceElement.getAttribute('value').trim() : null,\n                text: sourceElement.text.trim()\n              }\n            })\n          }\n\n          get disabled () {\n            return _p.get(this).attributes.disabled\n          }\n\n          set disabled (bool) {\n            this.setAttr('disabled', bool)\n          }\n\n          get index () {\n            return this.sourceElement.index\n          }\n\n          get id () {\n            return _p.get(this).attributes.id\n          }\n\n          set id (id) {\n            this.setAttr('id', id)\n          }\n\n          get selected () {\n            return _p.get(this).attributes.selected\n          }\n\n          set selected (bool) {\n            this.setAttr('selected', bool)\n          }\n\n          get label () {\n            return _p.get(this).attributes.label\n          }\n\n          set label (label) {\n            this.setAttr('label', label)\n          }\n\n          get text () {\n            return _p.get(this).attributes.text\n          }\n\n          set text (text) {\n            this.setAttr('text', text)\n          }\n\n          get value () {\n            return _p.get(this).attributes.value\n          }\n\n          set value (value) {\n            this.setAttr('value', value)\n          }\n\n          remove () {\n            this.sourceElement.remove()\n            this.displayElement.remove()\n          }\n\n          setAttr (name, value) {\n            this.sourceElement[name] = value\n\n            if (typeof value === 'boolean') {\n              value ? this.displayElement.setAttribute(name, '') : this.displayElement.removeAttribute(name)\n            } else {\n              this.displayElement.setAttribute(name, value)\n            }\n\n            _p.get(this).attributes[name] = value\n          }\n        }\n      },\n\n      getCurrentSelection: () => this.options.filter(option => option.selected),\n\n      handleClickSelection: (detail, cb) => {\n        let {\n          cherryPickedOptions,\n          getCurrentSelection,\n          lastSelectedIndex,\n          Selection,\n          selectionStartIndex\n        } = this.PRIVATE\n\n        let { index, shiftKey, ctrlKey, metaKey } = detail\n        let selectedOption = this.options[index]\n\n        if (shiftKey && lastSelectedIndex !== null) {\n          this.PRIVATE.lastSelectedIndex = index\n          this.PRIVATE.cherryPickedOptions.clear()\n          let bounds = [index, selectionStartIndex].sort((a, b) => a - b)\n          return cb(new Selection(bounds[0] === bounds[1] ? [selectedOption] : this.options.slice(bounds[0], bounds[1] + 1)))\n        }\n\n        let currentSelection = getCurrentSelection()\n\n        if (ctrlKey || metaKey) {\n          this.PRIVATE.lastSelectedIndex = index\n          this.PRIVATE.selectionStartIndex = index\n\n          this.PRIVATE.cherryPickedOptions.options = selectedOption.selected ? currentSelection.filter(option => option !== selectedOption) : this.options.filter(option => option === selectedOption || currentSelection.includes(option))\n          return cb(this.PRIVATE.cherryPickedOptions)\n        }\n\n        if (currentSelection.length === 1 && index === lastSelectedIndex) {\n          return\n        }\n\n        this.PRIVATE.lastSelectedIndex = index\n        this.PRIVATE.selectionStartIndex = index\n        this.PRIVATE.cherryPickedOptions.clear()\n        return cb(new Selection([selectedOption]))\n      },\n\n      handleKeyboardSelection: (detail, cb) => {\n        let {\n          cherryPickedOptions,\n          getCurrentSelection,\n          Selection,\n          selectionStartIndex\n        } = this.PRIVATE\n\n        let { index, shiftKey } = detail\n        let selectedOption = this.options[index]\n        let currentSelection = getCurrentSelection()\n\n        this.PRIVATE.lastSelectedIndex = index\n\n        if (!shiftKey || currentSelection.length === 0) {\n          this.PRIVATE.selectionStartIndex = index\n          this.PRIVATE.cherryPickedOptions.clear()\n          return cb(new Selection([selectedOption]))\n        }\n\n        // 1 option or more selected\n        if (currentSelection.length > 0) {\n          let bounds = [index, selectionStartIndex].sort()\n          let selection = new Selection(bounds[0] === bounds[1] ? [selectedOption] : this.options.slice(bounds[0], bounds[1] + 1))\n\n          if (cherryPickedOptions.length > 0) {\n            selection.options = this.options.filter(option => selection.includes(option) || cherryPickedOptions.includes(option))\n          }\n\n          return cb(selection)\n        }\n      },\n\n      optionSelectionHandler: evt => {\n        let {\n          cherryPickedOptions,\n          diffSelections,\n          getCurrentSelection,\n          generateAuthorHTMLCollectionConstructor,\n          handleClickSelection,\n          handleKeyboardSelection,\n          Selection\n        } = this.PRIVATE\n\n        if (cherryPickedOptions === null) {\n          this.PRIVATE.cherryPickedOptions = new Selection([])\n        }\n\n        let { index, keyboard } = evt.detail\n\n        let completeOperation = selection => {\n          let currentSelection = getCurrentSelection()\n          let comparator = selection.length >= currentSelection.length ? selection.options : currentSelection\n          let diff = diffSelections(comparator, comparator === currentSelection ? selection.options : currentSelection)\n\n          if (diff.length === 0 || !this.PRIVATE.isSlave) {\n            return\n          }\n\n          let { beforeChange } = this.parentNode\n\n          let detail = {\n            options: selection.options,\n            previous: this.selectedOptions,\n            next: new (generateAuthorHTMLCollectionConstructor())(selection.displayElements)\n          }\n\n          let cb = () => {\n            this.deselectAll()\n            selection.selectAll()\n            return this.emit('options.selected', detail, this.parentNode)\n          }\n\n          if (!(beforeChange && typeof beforeChange === 'function')) {\n            return cb()\n          }\n\n          beforeChange(this.selectedOptions, detail.next, cb)\n        }\n\n        if (!this.multiple) {\n          return completeOperation(new Selection([this.options[index]]))\n        }\n\n        if (keyboard) {\n          return this.PRIVATE.handleKeyboardSelection(evt.detail, completeOperation)\n        }\n\n        return this.PRIVATE.handleClickSelection(evt.detail, completeOperation)\n      },\n\n      parentStateChangeHandler: evt => {\n        this.emit('state.change', evt.detail)\n\n        let { name, value } = evt.detail\n\n        switch (name) {\n          case 'multiple':\n            if (!value && this.selectedOptions.length > 0) {\n              let index = this.selectedIndex\n\n              this.deselectAll()\n              this.emit('option.selected', { index })\n            }\n\n            break\n\n          default: return\n        }\n      }\n    })\n\n    this.UTIL.registerListeners(this, {\n      connected: () => {\n        this.PRIVATE.selectionStartIndex = this.selectedIndex >= 0 ? this.selectedIndex : 0\n\n        if (this.PRIVATE.isSlave) {\n          this.parentNode.on('state.change', this.PRIVATE.parentStateChangeHandler)\n        }\n      },\n\n      disconnected: () => {\n        if (this.PRIVATE.isSlave) {\n          this.parentNode.off('state.change', this.PRIVATE.parentStateChangeHandler)\n        }\n      },\n\n      'keydown.arrowUp': this.PRIVATE.arrowUpHandler,\n      'keydown.arrowDown': this.PRIVATE.arrowDownHandler,\n      'option.selected': this.PRIVATE.optionSelectionHandler\n    })\n  }\n\n  get selectedIndex () {\n    return this.selectedOptions.length > 0\n      ? this.selectedOptions.item(0).index\n      : -1\n  }\n\n  set selectedIndex (index) {\n    this.emit('option.selected', { index })\n  }\n\n  get selectionStartIndex () {\n    return this.PRIVATE.selectionStartIndex\n  }\n\n  set selectionStartIndex (value) {\n    this.UTIL.throwError({\n      type: 'readonly',\n      message: `\"selectionStartIndex\" cannot be set manually.`\n    })\n  }\n\n  addOptgroup (optgroup) {\n    let label = document.createElement('author-optgroup-label')\n    label.innerHTML = optgroup.getAttribute('label')\n\n    this.appendChild(label)\n    this.appendChild(optgroup)\n  }\n\n  addOption (option, index = null, dest = this) {\n    if (!customElements.get('author-option')) {\n      return this.UTIL.throwError({\n        type: 'dependency',\n        vars: {\n          name: 'author-option'\n        }\n      })\n    }\n\n    if (option instanceof Option) {\n      option = this.PRIVATE.generateOptionObject(option)\n    }\n\n    if (this.PRIVATE.isSlave) {\n      this.parentNode[`${option.index}`] = option.displayElement\n    }\n\n    if (index) {\n      dest.insertBefore(option.displayElement, dest.children.item(index))\n\n      this.options.splice(index, 0, option)\n\n      if (this.PRIVATE.isSlave) {\n        this.parentNode.sourceElement.add(option.sourceElement, index)\n      }\n\n    } else {\n      dest.appendChild(option.displayElement)\n      this.options.push(option)\n\n      if (this.PRIVATE.isSlave && !this.parentNode.sourceElement[this.options.length - 1]) {\n        this.parentNode.sourceElement.appendChild(option.sourceElement)\n      }\n    }\n\n    if (option.selected) {\n      if (!this.multiple) {\n        this.selectedIndex = option.index\n        return\n      }\n    }\n  }\n\n  addOptions (children) {\n    Array.from(children).forEach(child => {\n      let isElement = child instanceof HTMLElement\n\n      switch (child.nodeName) {\n        case 'OPTION':\n          return this.addOption(isElement ? this.PRIVATE.generateOptionObject(child) : child)\n\n        case 'OPTGROUP':\n          return this.addOptgroup(isElement ? this.PRIVATE.generateOptgroup(child) : child)\n\n        default:\n          return this.UTIL.printToConsole(`${child.nodeName.toLowerCase()} is not a valid child element for <author-select>. Removing...`, 'warning')\n      }\n    })\n  }\n\n  clear () {\n    while (this.lastChild) {\n      this.removeChild(this.lastChild)\n    }\n  }\n\n  deselect (option, updateList = true) {\n    if (typeof option === 'number') {\n      option = this.options[option]\n    }\n\n    option.selected = false\n\n    if (this.PRIVATE.isSlave) {\n      this.parentNode.selectedOptionsElement.remove(option, updateList)\n    }\n  }\n\n  deselectAll (showPlaceholder = true) {\n    this.options.filter(option => option.selected).forEach((option, index, options) => {\n      this.deselect(option, index = options.length - 1 && showPlaceholder)\n    })\n  }\n\n  hoverOption (index) {\n    this.unHoverAllOptions()\n    this.options[index].displayElement.hover = true\n  }\n\n  item (index) {\n    return this.options[index].displayElement\n  }\n\n  namedItem (value) {\n    let query = this.options.filter(option => {\n      let id = option.sourceElement.attributes.getNamedItem('id')\n      return id && id.value === value\n    })\n\n    if (!query.length) {\n      return null\n    }\n\n    return query[query.length - 1].displayElement\n  }\n\n  /**\n   * @method removeOptionByIndex\n   * @param  {Number}  [index=null]\n   * Index of option to remove\n   * @param  {Boolean} [destroy=true]\n   */\n  removeOptionByIndex (index = null) {\n    if (index === null || index >= this.options.length) {\n      return\n    }\n\n    this.options[index].remove()\n  }\n\n  unHoverAllOptions () {\n    this.options.forEach((option, index) => this.unHoverOption(index))\n  }\n\n  unHoverOption (index) {\n    this.options[index].displayElement.hover = false\n  }\n}\n\ncustomElements.define('author-options', AuthorOptionsElement)\n\nexport default AuthorOptionsElement\n"],"names":["AuthorOptionsElement","AuthorBaseElement","HTMLElement","[object Object]","super","this","UTIL","defineProperties","cherryPickedOptions","private","form","readonly","get","parentNode","displayOptions","PRIVATE","generateAuthorHTMLOptionsCollectionConstructor","options","map","option","displayElement","selectedIndex","element","before","addOption","generateOptionObject","index","removeOptionByIndex","hoveredIndex","findIndex","hover","isSlave","localName","lastSelectedIndex","multiple","default","selectedIndices","selectedOptions","nodes","querySelectorAll","generateAuthorHTMLCollectionConstructor","Selection","displayElements","length","first","last","push","includes","unshift","forEach","selected","selectionStartIndex","definePrivateMethods","arrowDownHandler","evt","startIndex","detail","hoverOption","emit","keyboard","shiftKey","ctrlKey","metaKey","arrowUpHandler","diffSelections","comparator","comparable","filter","_p","WeakMap","AuthorHTMLCollection","arr","add","remove","set","Symbol","toStringTag","generateOptgroup","optgroup","customElements","throwError","type","vars","name","surrogate","document","createElement","id","generateGuid","label","getAttribute","trim","message","setAttribute","Array","from","sourceElement","generateOptionConstructor","parent","key","defaultSelected","innerHTML","attributes","attr","value","removeAttribute","disabled","textContent","hasAttribute","text","bool","setAttr","getCurrentSelection","handleClickSelection","cb","selectedOption","clear","bounds","sort","a","b","slice","currentSelection","handleKeyboardSelection","selection","optionSelectionHandler","completeOperation","beforeChange","previous","next","deselectAll","selectAll","parentStateChangeHandler","registerListeners","connected","on","disconnected","off","keydown.arrowUp","keydown.arrowDown","option.selected","item","appendChild","dest","Option","insertBefore","children","splice","child","isElement","nodeName","addOptgroup","printToConsole","toLowerCase","lastChild","removeChild","updateList","selectedOptionsElement","showPlaceholder","deselect","unHoverAllOptions","query","getNamedItem","unHoverOption","define"],"mappings":"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"}