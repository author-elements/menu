{"version":3,"file":"author-options.es5.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorOptionsElement extends AuthorBaseElement(HTMLElement) {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    this.UTIL.defineProperties({\n      cherryPickedOptions: {\n        private: true\n      },\n\n      filteredOptions: {\n        readonly: true,\n        get: () => {\n          let { options } = this\n\n          for (let filter in this.PRIVATE.filters) {\n            options = this.PRIVATE.filters[filter]()\n          }\n\n          return Array.isArray(options) ? options : []\n        }\n      },\n\n      filters: {\n        private: true,\n        default: {}\n      },\n\n      form: {\n        readonly: true,\n        get: () => this.parentNode.form\n      },\n\n      displayOptions: {\n        readonly: true,\n        get: () => {\n          let AuthorHTMLOptionsCollection = this.PRIVATE.generateAuthorHTMLOptionsCollectionConstructor()\n          let array = this.options.map(option => option.displayElement)\n          let addFunction = (element, before) => this.addOption(this.PRIVATE.generateOptionObject(element), before)\n          let removeFunction = index => this.removeOptionByIndex(index)\n          return new AuthorHTMLOptionsCollection(array, this.selectedIndex, addFunction, removeFunction)\n        }\n      },\n\n      hoveredIndex: {\n        readonly: true,\n        get: () => this.options.findIndex(option => option.displayElement.hover)\n      },\n\n      isSlave: {\n        private: true,\n        readonly: true,\n        get: () => this.parentNode.localName === 'author-select' || this.parentNode.localName === 'author-datalist'\n      },\n\n      lastSelectedIndex: {\n        private: true\n      },\n\n      multiple: {\n        readonly: true,\n        get: () => this.parentNode.multiple\n      },\n\n      options: {\n        readonly: true,\n        default: []\n      },\n\n      selectedIndices: {\n        readonly: true,\n        get: () => [...this.selectedOptions].map(option => option.index)\n      },\n\n      selectedOptions: {\n        readonly: true,\n        get: () => {\n          let nodes = this.querySelectorAll('[selected]')\n          let AuthorHTMLCollection = this.PRIVATE.generateAuthorHTMLCollectionConstructor()\n          return new AuthorHTMLCollection(nodes)\n        }\n      },\n\n      Selection: {\n        readonly: true,\n        private: true,\n        default: class {\n          constructor (options = []) {\n            this.options = options\n          }\n\n          get displayElements () {\n            return this.options.map(option => option.displayElement)\n          }\n\n          get length () {\n            return this.options.length\n          }\n\n          get first () {\n            return this.options[0]\n          }\n\n          get last () {\n            return this.options[this.options.length - 1]\n          }\n\n          append (option) {\n            this.options.push(option)\n          }\n\n          clear () {\n            this.options = []\n          }\n\n          includes (option) {\n            return this.options.includes(option)\n          }\n\n          prepend (option) {\n            this.options.unshift(option)\n          }\n\n          selectAll () {\n            this.options.forEach(option => option.selected = true)\n          }\n        }\n      },\n\n      selectionStartIndex: {\n        private: true\n      },\n\n      visibleOptions: {\n        readonly: true,\n        get: () => this.options.filter(option => !option.hidden)\n      }\n    })\n\n    this.UTIL.definePrivateMethods({\n      arrowDownHandler: evt => {\n        if (!this.multiple) {\n          let { startIndex } = evt.detail\n\n          switch (startIndex) {\n            case this.options.length - 1:\n              return\n\n            default:\n              return this.PRIVATE.hoverNextOption(startIndex)\n          }\n\n          return\n        }\n\n        let { lastSelectedIndex } = this.PRIVATE\n\n        if (lastSelectedIndex === this.options.length - 1) {\n          return\n        }\n\n        return this.emit('option.selected', {\n          index: lastSelectedIndex === null ? 0 : lastSelectedIndex + 1,\n          keyboard: true,\n          shiftKey: evt.detail.shiftKey,\n          ctrlKey: false,\n          metaKey: false\n        })\n      },\n\n      arrowUpHandler: evt => {\n        if (!this.multiple) {\n          let { startIndex } = evt.detail\n\n          switch (startIndex) {\n            case -1:\n            case 0:\n              return\n\n            default:\n              return this.PRIVATE.hoverPreviousOption(startIndex)\n          }\n\n          return\n        }\n\n        let { lastSelectedIndex } = this.PRIVATE\n\n        if (lastSelectedIndex === 0) {\n          return\n        }\n\n        return this.emit('option.selected', {\n          index: lastSelectedIndex === null ? this.options.length - 1 : lastSelectedIndex - 1,\n          keyboard: true,\n          shiftKey: evt.detail.shiftKey,\n          ctrlKey: false,\n          metaKey: false\n        })\n      },\n\n      diffSelections: (comparator, comparable) => {\n        return comparator.filter(option => !comparable.includes(option))\n      },\n\n      generateAuthorHTMLOptionsCollectionConstructor: () => {\n        let _p = new WeakMap()\n\n        let AuthorHTMLCollection = this.PRIVATE.generateAuthorHTMLCollectionConstructor()\n\n        let AuthorHTMLOptionsCollection = class AuthorHTMLOptionsCollection extends AuthorHTMLCollection {\n          constructor (arr, selectedIndex = -1, add, remove) {\n            super(arr)\n            this.selectedIndex = selectedIndex\n            this.add = add\n            this.remove = remove\n\n            _p.set(this, {arr})\n          }\n\n          [Symbol.toStringTag] () {\n            return 'AuthorHTMLOptionsCollection'\n          }\n        }\n\n        return AuthorHTMLOptionsCollection\n      },\n\n      generateOptgroup: optgroup => {\n        if (!customElements.get('author-optgroup')) {\n          return this.UTIL.throwError({\n            type: 'dependency',\n            vars: { name: 'author-optgroup' }\n          })\n        }\n\n        let surrogate = document.createElement('author-optgroup')\n        surrogate.id = this.UTIL.generateGuid('optgroup')\n\n        let label = optgroup.getAttribute('label')\n\n        if (!label || label.trim() === '') {\n          return this.UTIL.throwError({\n            message: '<optgroup> must have a label attribute!'\n          })\n        }\n\n        surrogate.setAttribute('label', label)\n\n        let options = optgroup.querySelectorAll('option')\n        Array.from(options).forEach(option => {\n          this.addOption(this.PRIVATE.generateOptionObject(option), null, surrogate)\n        })\n\n        return surrogate\n      },\n\n      generateOptionObject: sourceElement => {\n        if (!customElements.get('author-option')) {\n          return this.UTIL.throwError({\n            type: 'dependency',\n            vars: { name: 'author-option' }\n          })\n        }\n\n        let OptionConstructor = this.PRIVATE.generateOptionConstructor()\n        return new OptionConstructor(this, this.UTIL.generateGuid(), sourceElement, document.createElement('author-option'))\n      },\n\n      generateOptionConstructor: () => {\n        let _p = new WeakMap()\n\n        return class AuthorOptionObject {\n          constructor (parent, key, sourceElement, displayElement) {\n            this.key = key\n            this.form = parent.form\n            this.defaultSelected = sourceElement.selected\n\n            this.sourceElement = sourceElement\n            this.displayElement = displayElement\n            this.displayElement.parent = parent\n            this.displayElement.selected = sourceElement.selected\n            this.displayElement.defaultSelected = sourceElement.selected\n            this.displayElement.innerHTML = sourceElement.innerHTML\n\n            // Add additional attributes\n            Array.from(sourceElement.attributes).forEach(attr => {\n              if (typeof attr.value === 'boolean') {\n                return attr.value ? this.displayElement.setAttribute(attr.name, '') : this.displayElement.removeAttribute(attr.name)\n              }\n\n              this.displayElement.setAttribute(attr.name, attr.value)\n            })\n\n            _p.set(this, {\n              attributes: {\n                disabled: sourceElement.disabled,\n                id: sourceElement.getAttribute('id'),\n                label: sourceElement.getAttribute('label') || sourceElement.textContent.trim(),\n                selected: sourceElement.selected,\n                value: sourceElement.hasAttribute('value') ? sourceElement.getAttribute('value').trim() : null,\n                text: sourceElement.text.trim()\n              },\n\n              setAttr: (name, value) => {\n                this.sourceElement[name] = value\n\n                if (typeof value === 'boolean') {\n                  value ? this.displayElement.setAttribute(name, '') : this.displayElement.removeAttribute(name)\n                } else {\n                  this.displayElement.setAttribute(name, value)\n                }\n\n                _p.get(this).attributes[name] = value\n              }\n            })\n          }\n\n          get disabled () {\n            return _p.get(this).attributes.disabled\n          }\n\n          set disabled (bool) {\n            _p.get(this).setAttr('disabled', bool)\n          }\n\n          get hidden () {\n            return this.displayElement.hidden\n          }\n\n          set hidden (bool) {\n            this.displayElement.hidden = bool\n          }\n\n          get index () {\n            return this.sourceElement.index\n          }\n\n          get id () {\n            return _p.get(this).attributes.id\n          }\n\n          set id (id) {\n            _p.get(this).setAttr('id', id)\n          }\n\n          get selected () {\n            return _p.get(this).attributes.selected\n          }\n\n          set selected (bool) {\n            _p.get(this).setAttr('selected', bool)\n          }\n\n          get label () {\n            return _p.get(this).attributes.label\n          }\n\n          set label (label) {\n            _p.get(this).setAttr('label', label)\n          }\n\n          get text () {\n            return _p.get(this).attributes.text\n          }\n\n          set text (text) {\n            _p.get(this).setAttr('text', text)\n          }\n\n          get value () {\n            return _p.get(this).attributes.value\n          }\n\n          set value (value) {\n            _p.get(this).setAttr('value', value)\n          }\n\n          remove () {\n            this.sourceElement.remove()\n            this.displayElement.remove()\n          }\n        }\n      },\n\n      getCurrentSelection: () => this.options.filter(option => option.selected),\n\n      getPreviousVisibleOption: startIndex => {\n        let index = startIndex - 1\n        let option = this.options[index]\n\n        if (!option) {\n          return null\n        }\n\n        if (option.hidden) {\n          option = this.PRIVATE.getPreviousVisibleOption(index)\n        }\n\n        return option\n      },\n\n      getNextVisibleOption: startIndex => {\n        let index = startIndex + 1\n        let option = this.options[index]\n\n        if (!option) {\n          return null\n        }\n\n        if (option.hidden) {\n          option = this.PRIVATE.getNextVisibleOption(index)\n        }\n\n        return option\n      },\n\n      handleClickSelection: (detail, cb) => {\n        let {\n          cherryPickedOptions,\n          getCurrentSelection,\n          lastSelectedIndex,\n          Selection,\n          selectionStartIndex\n        } = this.PRIVATE\n\n        let { index, shiftKey, ctrlKey, metaKey } = detail\n        let selectedOption = this.options[index]\n\n        if (shiftKey && lastSelectedIndex !== null) {\n          this.PRIVATE.lastSelectedIndex = index\n          this.PRIVATE.cherryPickedOptions.clear()\n          let bounds = [index, selectionStartIndex].sort((a, b) => a - b)\n          return cb(new Selection(bounds[0] === bounds[1] ? [selectedOption] : this.options.slice(bounds[0], bounds[1] + 1)))\n        }\n\n        let currentSelection = getCurrentSelection()\n\n        if (ctrlKey || metaKey) {\n          this.PRIVATE.lastSelectedIndex = index\n          this.PRIVATE.selectionStartIndex = index\n\n          this.PRIVATE.cherryPickedOptions.options = selectedOption.selected ? currentSelection.filter(option => option !== selectedOption) : this.options.filter(option => option === selectedOption || currentSelection.includes(option))\n          return cb(this.PRIVATE.cherryPickedOptions)\n        }\n\n        if (currentSelection.length === 1 && index === lastSelectedIndex) {\n          return\n        }\n\n        this.PRIVATE.lastSelectedIndex = index\n        this.PRIVATE.selectionStartIndex = index\n        this.PRIVATE.cherryPickedOptions.clear()\n        return cb(new Selection([selectedOption]))\n      },\n\n      handleKeyboardSelection: (detail, cb) => {\n        let {\n          cherryPickedOptions,\n          getCurrentSelection,\n          Selection,\n          selectionStartIndex\n        } = this.PRIVATE\n\n        let { index, shiftKey } = detail\n        let selectedOption = this.options[index]\n        let currentSelection = getCurrentSelection()\n\n        this.PRIVATE.lastSelectedIndex = index\n\n        if (!shiftKey || currentSelection.length === 0) {\n          this.PRIVATE.selectionStartIndex = index\n          this.PRIVATE.cherryPickedOptions.clear()\n          return cb(new Selection([selectedOption]))\n        }\n\n        // 1 option or more selected\n        if (currentSelection.length > 0) {\n          let bounds = [index, selectionStartIndex].sort()\n          let selection = new Selection(bounds[0] === bounds[1] ? [selectedOption] : this.options.slice(bounds[0], bounds[1] + 1))\n\n          if (cherryPickedOptions.length > 0) {\n            selection.options = this.options.filter(option => selection.includes(option) || cherryPickedOptions.includes(option))\n          }\n\n          return cb(selection)\n        }\n      },\n\n      hoverPreviousOption: (startIndex) => {\n        let option = this.PRIVATE.getPreviousVisibleOption(startIndex);\n\n        if (!option || option.index === startIndex) {\n          return\n        }\n\n        this.hoverOption(option.index);\n      },\n\n      hoverNextOption: (startIndex) => {\n        let option = this.PRIVATE.getNextVisibleOption(startIndex);\n\n        if (!option || option.index === startIndex) {\n          return\n        }\n\n        this.hoverOption(option.index);\n      },\n\n      optionSelectionHandler: evt => {\n        let {\n          cherryPickedOptions,\n          diffSelections,\n          getCurrentSelection,\n          generateAuthorHTMLCollectionConstructor,\n          handleClickSelection,\n          handleKeyboardSelection,\n          Selection\n        } = this.PRIVATE\n\n        if (cherryPickedOptions === null) {\n          this.PRIVATE.cherryPickedOptions = new Selection([])\n        }\n\n        let { index, keyboard } = evt.detail\n\n        let completeOperation = selection => {\n          let currentSelection = getCurrentSelection()\n          let comparator = selection.length >= currentSelection.length ? selection.options : currentSelection\n          let diff = diffSelections(comparator, comparator === currentSelection ? selection.options : currentSelection)\n\n          if (diff.length === 0 || !this.PRIVATE.isSlave) {\n            return\n          }\n\n          this.deselectAll()\n          selection.selectAll()\n          this.emit('options.selected', {\n            options: selection.options,\n            previous: this.selectedOptions,\n            next: new (generateAuthorHTMLCollectionConstructor())(selection.displayElements)\n          }, this.parentNode)\n\n          // let { beforeChange } = this.parentNode\n          //\n          // let detail = {\n          //   options: selection.options,\n          //   previous: this.selectedOptions,\n          //   next: new (generateAuthorHTMLCollectionConstructor())(selection.displayElements)\n          // }\n          //\n          // let cb = () => {\n          //   this.deselectAll()\n          //   selection.selectAll()\n          //   return this.emit('options.selected', detail, this.parentNode)\n          // }\n          //\n          // if (!(beforeChange && typeof beforeChange === 'function')) {\n          //   return cb()\n          // }\n          //\n          // beforeChange(this.selectedOptions, detail.next, cb)\n        }\n\n        if (!this.multiple) {\n          return completeOperation(new Selection([this.options[index]]))\n        }\n\n        if (keyboard) {\n          return this.PRIVATE.handleKeyboardSelection(evt.detail, completeOperation)\n        }\n\n        return this.PRIVATE.handleClickSelection(evt.detail, completeOperation)\n      },\n\n      parentStateChangeHandler: evt => {\n        this.emit('state.change', evt.detail)\n\n        let { name, value } = evt.detail\n\n        switch (name) {\n          case 'multiple':\n            if (!value && this.selectedOptions.length > 0) {\n              let index = this.selectedIndex\n\n              this.deselectAll()\n              this.emit('option.selected', { index })\n            }\n\n            break\n\n          default: return\n        }\n      }\n    })\n\n    this.UTIL.registerListeners(this, {\n      connected: () => {\n        this.PRIVATE.selectionStartIndex = this.selectedIndex >= 0 ? this.selectedIndex : 0\n\n        if (this.PRIVATE.isSlave) {\n          this.parentNode.on('state.change', this.PRIVATE.parentStateChangeHandler)\n        }\n      },\n\n      disconnected: () => {\n        if (this.PRIVATE.isSlave) {\n          this.parentNode.off('state.change', this.PRIVATE.parentStateChangeHandler)\n        }\n      },\n\n      'keydown.arrowUp': this.PRIVATE.arrowUpHandler,\n      'keydown.arrowDown': this.PRIVATE.arrowDownHandler,\n      'option.selected': this.PRIVATE.optionSelectionHandler\n    })\n  }\n\n  get selectedIndex () {\n    return this.selectedOptions.length > 0\n      ? this.selectedOptions.item(0).index\n      : -1\n  }\n\n  set selectedIndex (index) {\n    this.emit('option.selected', { index })\n  }\n\n  get selectionStartIndex () {\n    return this.PRIVATE.selectionStartIndex\n  }\n\n  set selectionStartIndex (value) {\n    this.UTIL.throwError({\n      type: 'readonly',\n      message: `\"selectionStartIndex\" cannot be set manually.`\n    })\n  }\n\n  addFilter (key = this.UTIL.generateGuid('filter_'), func) {\n    if (typeof func !== 'function') {\n      this.UTIL.throwError({\n        type: 'type',\n        message: `Filter must be a function`\n      })\n    }\n\n    if (this.PRIVATE.filters.hasOwnProperty(key)) {\n      console.warn(`Filter \"${key}\" alredy exists! Overwriting...`)\n    }\n\n    this.PRIVATE.filters[key] = func\n  }\n\n  hasFilter (filter) {\n    return this.PRIVATE.filters.hasOwnProperty(filter)\n  }\n\n  removeFilter (key) {\n    if (!this.PRIVATE.filters.hasOwnProperty(key)) {\n      return console.warn(`Filter \"${key}\" not found.`)\n    }\n\n    delete this.PRIVATE.filters[key]\n  }\n\n  removeAllFilters () {\n    this.PRIVATE.filters = {}\n  }\n\n  addOptgroup (optgroup) {\n    let label = document.createElement('author-optgroup-label')\n    label.innerHTML = optgroup.getAttribute('label')\n\n    this.appendChild(label)\n    this.appendChild(optgroup)\n  }\n\n  addOption (option, index = null, dest = this) {\n    if (!customElements.get('author-option')) {\n      return this.UTIL.throwError({\n        type: 'dependency',\n        vars: {\n          name: 'author-option'\n        }\n      })\n    }\n\n    if (option instanceof Option) {\n      option = this.PRIVATE.generateOptionObject(option)\n    }\n\n    if (this.PRIVATE.isSlave) {\n      this.parentNode[`${option.index}`] = option.displayElement\n    }\n\n    if (index) {\n      dest.insertBefore(option.displayElement, dest.children.item(index))\n\n      this.options.splice(index, 0, option)\n\n      if (this.PRIVATE.isSlave) {\n        this.parentNode.sourceElement.add(option.sourceElement, index)\n      }\n\n    } else {\n      dest.appendChild(option.displayElement)\n      this.options.push(option)\n\n      if (this.PRIVATE.isSlave && !this.parentNode.sourceElement[this.options.length - 1]) {\n        this.parentNode.sourceElement.appendChild(option.sourceElement)\n      }\n    }\n\n    if (option.selected) {\n      if (!this.multiple) {\n        this.selectedIndex = option.index\n        return\n      }\n    }\n  }\n\n  addOptions (children) {\n    Array.from(children).forEach(child => {\n      let isElement = child instanceof HTMLElement\n\n      switch (child.nodeName) {\n        case 'OPTION':\n          return this.addOption(isElement ? this.PRIVATE.generateOptionObject(child) : child)\n\n        case 'OPTGROUP':\n          return this.addOptgroup(isElement ? this.PRIVATE.generateOptgroup(child) : child)\n\n        default:\n          return this.UTIL.printToConsole(`${child.nodeName.toLowerCase()} is not a valid child element for <author-select>. Removing...`, 'warning')\n      }\n    })\n  }\n\n  clear () {\n    while (this.lastChild) {\n      this.removeChild(this.lastChild)\n    }\n  }\n\n  deselect (option, updateList = true) {\n    if (typeof option === 'number') {\n      option = this.options[option]\n    }\n\n    option.selected = false\n\n    if (this.PRIVATE.isSlave && this.selectedOptionsElement !== undefined) {\n      this.parentNode.selectedOptionsElement.remove(option, updateList)\n    }\n  }\n\n  deselectAll (showPlaceholder = true) {\n    this.options.filter(option => option.selected).forEach((option, index, options) => {\n      this.deselect(option, index = options.length - 1 && showPlaceholder)\n    })\n  }\n\n  find (query, caseSensitive = false) {\n    let results = Array.from(this.options).filter(option => {\n      let value = caseSensitive ? option.value : option.value.toLowerCase()\n      let text = caseSensitive ? option.text : option.text.toLowerCase()\n      query = caseSensitive ? query : query.toLowerCase()\n\n      return value.indexOf(query) >= 0 || text.indexOf(query) >= 0\n    })\n\n    return Array.isArray(results) ? results : []\n  }\n\n  hoverOption (index) {\n    this.unHoverAllOptions()\n    this.options[index].displayElement.hover = true\n  }\n\n  item (index) {\n    return this.options[index].displayElement\n  }\n\n  namedItem (value) {\n    let query = this.options.filter(option => {\n      let id = option.sourceElement.attributes.getNamedItem('id')\n      return id && id.value === value\n    })\n\n    if (!query.length) {\n      return null\n    }\n\n    return query[query.length - 1].displayElement\n  }\n\n  /**\n   * @method removeOptionByIndex\n   * @param  {Number}  [index=null]\n   * Index of option to remove\n   * @param  {Boolean} [destroy=true]\n   */\n  removeOptionByIndex (index = null) {\n    if (index === null || index >= this.options.length) {\n      return\n    }\n\n    this.options[index].remove()\n  }\n\n  unHoverAllOptions () {\n    this.options.forEach((option, index) => this.unHoverOption(index))\n  }\n\n  unHoverOption (index) {\n    this.options[index].displayElement.hover = false\n  }\n}\n\ncustomElements.define('author-options', AuthorOptionsElement)\n\nexport default AuthorOptionsElement\n"],"names":["AuthorOptionsElement","UTIL","defineProperties","cherryPickedOptions","private","filteredOptions","readonly","get","options","filter","_this","PRIVATE","filters","Array","isArray","default","form","parentNode","displayOptions","generateAuthorHTMLOptionsCollectionConstructor","map","option","displayElement","selectedIndex","element","before","addOption","generateOptionObject","index","removeOptionByIndex","hoveredIndex","findIndex","hover","isSlave","localName","lastSelectedIndex","multiple","selectedIndices","_toConsumableArray","selectedOptions","nodes","querySelectorAll","generateAuthorHTMLCollectionConstructor","Selection","push","this","includes","unshift","forEach","selected","length","selectionStartIndex","visibleOptions","hidden","definePrivateMethods","arrowDownHandler","evt","emit","keyboard","shiftKey","detail","ctrlKey","metaKey","startIndex","hoverNextOption","arrowUpHandler","hoverPreviousOption","diffSelections","comparator","comparable","_p","WeakMap","AuthorHTMLCollection","arr","add","remove","set","Symbol","toStringTag","generateOptgroup","optgroup","customElements","throwError","type","vars","name","surrogate","document","createElement","id","generateGuid","label","getAttribute","trim","message","setAttribute","from","sourceElement","generateOptionConstructor","parent","key","defaultSelected","innerHTML","attributes","attr","value","_this3","removeAttribute","disabled","textContent","hasAttribute","text","setAttr","bool","getCurrentSelection","getPreviousVisibleOption","getNextVisibleOption","handleClickSelection","cb","selectedOption","clear","bounds","sort","a","b","slice","currentSelection","handleKeyboardSelection","selection","hoverOption","optionSelectionHandler","completeOperation","deselectAll","selectAll","previous","next","displayElements","parentStateChangeHandler","registerListeners","connected","on","disconnected","off","AuthorBaseElement","HTMLElement","func","hasOwnProperty","console","warn","appendChild","dest","Option","insertBefore","children","item","splice","child","isElement","nodeName","_this4","addOptgroup","printToConsole","toLowerCase","lastChild","removeChild","updateList","undefined","selectedOptionsElement","showPlaceholder","_this5","deselect","query","caseSensitive","results","indexOf","unHoverAllOptions","getNamedItem","_this6","unHoverOption","define"],"mappings":"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"}