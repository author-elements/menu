{"version":3,"file":"author-options.es5.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorOptionsElement extends AuthorBaseElement(HTMLElement) {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    this.UTIL.defineProperties({\n      cherryPickedOptions: {\n        private: true\n      },\n\n      form: {\n        readonly: true,\n        get: () => this.parentNode.form\n      },\n\n      displayOptions: {\n        readonly: true,\n        get: () => {\n          let AuthorHTMLOptionsCollection = this.PRIVATE.generateAuthorHTMLOptionsCollectionConstructor()\n          let array = this.options.map(option => option.displayElement)\n          let addFunction = (element, before) => this.addOption(this.PRIVATE.generateOptionObject(element), before)\n          let removeFunction = index => this.removeOptionByIndex(index)\n          return new AuthorHTMLOptionsCollection(array, this.selectedIndex, addFunction, removeFunction)\n        }\n      },\n\n      hoveredIndex: {\n        readonly: true,\n        get: () => this.options.findIndex(option => option.displayElement.hover)\n      },\n\n      isSlave: {\n        private: true,\n        readonly: true,\n        get: () => this.parentNode.localName === 'author-select' || this.parentNode.localName === 'author-datalist'\n      },\n\n      lastSelectedIndex: {\n        private: true\n      },\n\n      multiple: {\n        readonly: true,\n        get: () => this.parentNode.multiple\n      },\n\n      options: {\n        readonly: true,\n        default: []\n      },\n\n      selectedIndices: {\n        readonly: true,\n        get: () => [...this.selectedOptions].map(option => option.index)\n      },\n\n      selectedOptions: {\n        readonly: true,\n        get: () => {\n          let nodes = this.querySelectorAll('[selected]')\n          let AuthorHTMLCollection = this.PRIVATE.generateAuthorHTMLCollectionConstructor()\n          return new AuthorHTMLCollection(nodes)\n        }\n      },\n\n      Selection: {\n        readonly: true,\n        private: true,\n        default: class {\n          constructor (options = []) {\n            this.options = options\n          }\n\n          get displayElements () {\n            return this.options.map(option => option.displayElement)\n          }\n\n          get length () {\n            return this.options.length\n          }\n\n          get first () {\n            return this.options[0]\n          }\n\n          get last () {\n            return this.options[this.options.length - 1]\n          }\n\n          append (option) {\n            this.options.push(option)\n          }\n\n          clear () {\n            this.options = []\n          }\n\n          includes (option) {\n            return this.options.includes(option)\n          }\n\n          prepend (option) {\n            this.options.unshift(option)\n          }\n\n          selectAll () {\n            this.options.forEach(option => option.selected = true)\n          }\n        }\n      },\n\n      selectionStartIndex: {\n        private: true\n      }\n    })\n\n    this.UTIL.definePrivateMethods({\n      arrowDownHandler: evt => {\n        if (!this.multiple) {\n          let { startIndex } = evt.detail\n\n          switch (startIndex) {\n            case this.options.length - 1:\n              return\n\n            default:\n              return this.hoverOption(startIndex + 1)\n          }\n\n          return\n        }\n\n        let { lastSelectedIndex } = this.PRIVATE\n\n        if (lastSelectedIndex === this.options.length - 1) {\n          return\n        }\n\n        return this.emit('option.selected', {\n          index: lastSelectedIndex === null ? 0 : lastSelectedIndex + 1,\n          keyboard: true,\n          shiftKey: evt.detail.shiftKey,\n          ctrlKey: false,\n          metaKey: false\n        })\n      },\n\n      arrowUpHandler: evt => {\n        if (!this.multiple) {\n          let { startIndex } = evt.detail\n\n          switch (startIndex) {\n            case -1:\n            case 0:\n              return\n\n            default:\n              return this.hoverOption(startIndex - 1)\n          }\n\n          return\n        }\n\n        let { lastSelectedIndex } = this.PRIVATE\n\n        if (lastSelectedIndex === 0) {\n          return\n        }\n\n        return this.emit('option.selected', {\n          index: lastSelectedIndex === null ? this.options.length - 1 : lastSelectedIndex - 1,\n          keyboard: true,\n          shiftKey: evt.detail.shiftKey,\n          ctrlKey: false,\n          metaKey: false\n        })\n      },\n\n      diffSelections: (comparator, comparable) => {\n        return comparator.filter(option => !comparable.includes(option))\n      },\n\n      generateAuthorHTMLOptionsCollectionConstructor: () => {\n        let _p = new WeakMap()\n\n        let AuthorHTMLCollection = this.PRIVATE.generateAuthorHTMLCollectionConstructor()\n\n        let AuthorHTMLOptionsCollection = class AuthorHTMLOptionsCollection extends AuthorHTMLCollection {\n          constructor (arr, selectedIndex = -1, add, remove) {\n            super(arr)\n            this.selectedIndex = selectedIndex\n            this.add = add\n            this.remove = remove\n\n            _p.set(this, {arr})\n          }\n\n          [Symbol.toStringTag] () {\n            return 'AuthorHTMLOptionsCollection'\n          }\n        }\n\n        return AuthorHTMLOptionsCollection\n      },\n\n      generateOptgroup: optgroup => {\n        if (!customElements.get('author-optgroup')) {\n          return this.UTIL.throwError({\n            type: 'dependency',\n            vars: { name: 'author-optgroup' }\n          })\n        }\n\n        let surrogate = document.createElement('author-optgroup')\n        surrogate.id = this.UTIL.generateGuid('optgroup')\n\n        let label = optgroup.getAttribute('label')\n\n        if (!label || label.trim() === '') {\n          return this.UTIL.throwError({\n            message: '<optgroup> must have a label attribute!'\n          })\n        }\n\n        surrogate.setAttribute('label', label)\n\n        let options = optgroup.querySelectorAll('option')\n        Array.from(options).forEach(option => {\n          this.addOption(this.PRIVATE.generateOptionObject(option), null, surrogate)\n        })\n\n        return surrogate\n      },\n\n      generateOptionObject: sourceElement => {\n        if (!customElements.get('author-option')) {\n          return this.UTIL.throwError({\n            type: 'dependency',\n            vars: { name: 'author-option' }\n          })\n        }\n\n        let OptionConstructor = this.PRIVATE.generateOptionConstructor()\n        return new OptionConstructor(this, this.UTIL.generateGuid(), sourceElement, document.createElement('author-option'))\n      },\n\n      generateOptionConstructor: () => {\n        let _p = new WeakMap()\n\n        return class AuthorOptionObject {\n          constructor (parent, key, sourceElement, displayElement) {\n            this.key = key\n            this.form = parent.form\n            this.defaultSelected = sourceElement.selected\n\n            this.sourceElement = sourceElement\n            this.displayElement = displayElement\n            this.displayElement.parent = parent\n            this.displayElement.selected = sourceElement.selected\n            this.displayElement.defaultSelected = sourceElement.selected\n            this.displayElement.innerHTML = sourceElement.innerHTML\n\n            // Add additional attributes\n            Array.from(sourceElement.attributes).forEach(attr => {\n              if (typeof attr.value === 'boolean') {\n                return attr.value ? this.displayElement.setAttribute(attr.name, '') : this.displayElement.removeAttribute(attr.name)\n              }\n\n              this.displayElement.setAttribute(attr.name, attr.value)\n            })\n\n            _p.set(this, {\n              attributes: {\n                disabled: sourceElement.disabled,\n                id: sourceElement.getAttribute('id'),\n                label: sourceElement.getAttribute('label') || sourceElement.textContent.trim(),\n                selected: sourceElement.selected,\n                value: sourceElement.hasAttribute('value') ? sourceElement.getAttribute('value').trim() : null,\n                text: sourceElement.text.trim()\n              }\n            })\n          }\n\n          get disabled () {\n            return _p.get(this).attributes.disabled\n          }\n\n          set disabled (bool) {\n            this.setAttr('disabled', bool)\n          }\n\n          get index () {\n            return this.sourceElement.index\n          }\n\n          get id () {\n            return _p.get(this).attributes.id\n          }\n\n          set id (id) {\n            this.setAttr('id', id)\n          }\n\n          get selected () {\n            return _p.get(this).attributes.selected\n          }\n\n          set selected (bool) {\n            this.setAttr('selected', bool)\n          }\n\n          get label () {\n            return _p.get(this).attributes.label\n          }\n\n          set label (label) {\n            this.setAttr('label', label)\n          }\n\n          get text () {\n            return _p.get(this).attributes.text\n          }\n\n          set text (text) {\n            this.setAttr('text', text)\n          }\n\n          get value () {\n            return _p.get(this).attributes.value\n          }\n\n          set value (value) {\n            this.setAttr('value', value)\n          }\n\n          remove () {\n            this.sourceElement.remove()\n            this.displayElement.remove()\n          }\n\n          setAttr (name, value) {\n            this.sourceElement[name] = value\n\n            if (typeof value === 'boolean') {\n              value ? this.displayElement.setAttribute(name, '') : this.displayElement.removeAttribute(name)\n            } else {\n              this.displayElement.setAttribute(name, value)\n            }\n\n            _p.get(this).attributes[name] = value\n          }\n        }\n      },\n\n      getCurrentSelection: () => this.options.filter(option => option.selected),\n\n      handleClickSelection: (detail, cb) => {\n        let {\n          cherryPickedOptions,\n          getCurrentSelection,\n          lastSelectedIndex,\n          Selection,\n          selectionStartIndex\n        } = this.PRIVATE\n\n        let { index, shiftKey, ctrlKey, metaKey } = detail\n        let selectedOption = this.options[index]\n\n        if (shiftKey && lastSelectedIndex !== null) {\n          this.PRIVATE.lastSelectedIndex = index\n          this.PRIVATE.cherryPickedOptions.clear()\n          let bounds = [index, selectionStartIndex].sort((a, b) => a - b)\n          return cb(new Selection(bounds[0] === bounds[1] ? [selectedOption] : this.options.slice(bounds[0], bounds[1] + 1)))\n        }\n\n        let currentSelection = getCurrentSelection()\n\n        if (ctrlKey || metaKey) {\n          this.PRIVATE.lastSelectedIndex = index\n          this.PRIVATE.selectionStartIndex = index\n\n          this.PRIVATE.cherryPickedOptions.options = selectedOption.selected ? currentSelection.filter(option => option !== selectedOption) : this.options.filter(option => option === selectedOption || currentSelection.includes(option))\n          return cb(this.PRIVATE.cherryPickedOptions)\n        }\n\n        if (currentSelection.length === 1 && index === lastSelectedIndex) {\n          return\n        }\n\n        this.PRIVATE.lastSelectedIndex = index\n        this.PRIVATE.selectionStartIndex = index\n        this.PRIVATE.cherryPickedOptions.clear()\n        return cb(new Selection([selectedOption]))\n      },\n\n      handleKeyboardSelection: (detail, cb) => {\n        let {\n          cherryPickedOptions,\n          getCurrentSelection,\n          Selection,\n          selectionStartIndex\n        } = this.PRIVATE\n\n        let { index, shiftKey } = detail\n        let selectedOption = this.options[index]\n        let currentSelection = getCurrentSelection()\n\n        this.PRIVATE.lastSelectedIndex = index\n\n        if (!shiftKey || currentSelection.length === 0) {\n          this.PRIVATE.selectionStartIndex = index\n          this.PRIVATE.cherryPickedOptions.clear()\n          return cb(new Selection([selectedOption]))\n        }\n\n        // 1 option or more selected\n        if (currentSelection.length > 0) {\n          let bounds = [index, selectionStartIndex].sort()\n          let selection = new Selection(bounds[0] === bounds[1] ? [selectedOption] : this.options.slice(bounds[0], bounds[1] + 1))\n\n          if (cherryPickedOptions.length > 0) {\n            selection.options = this.options.filter(option => selection.includes(option) || cherryPickedOptions.includes(option))\n          }\n\n          return cb(selection)\n        }\n      },\n\n      optionSelectionHandler: evt => {\n        let {\n          cherryPickedOptions,\n          diffSelections,\n          getCurrentSelection,\n          generateAuthorHTMLCollectionConstructor,\n          handleClickSelection,\n          handleKeyboardSelection,\n          Selection\n        } = this.PRIVATE\n\n        if (cherryPickedOptions === null) {\n          this.PRIVATE.cherryPickedOptions = new Selection([])\n        }\n\n        let { index, keyboard } = evt.detail\n\n        let completeOperation = selection => {\n          let currentSelection = getCurrentSelection()\n          let comparator = selection.length >= currentSelection.length ? selection.options : currentSelection\n          let diff = diffSelections(comparator, comparator === currentSelection ? selection.options : currentSelection)\n\n          if (diff.length === 0 || !this.PRIVATE.isSlave) {\n            return\n          }\n\n          let { beforeChange } = this.parentNode\n\n          let detail = {\n            options: selection.options,\n            previous: this.selectedOptions,\n            next: new (generateAuthorHTMLCollectionConstructor())(selection.displayElements)\n          }\n\n          let cb = () => {\n            this.deselectAll()\n            selection.selectAll()\n            return this.emit('options.selected', detail, this.parentNode)\n          }\n\n          if (!(beforeChange && typeof beforeChange === 'function')) {\n            return cb()\n          }\n\n          beforeChange(this.selectedOptions, detail.next, cb)\n        }\n\n        if (!this.multiple) {\n          return completeOperation(new Selection([this.options[index]]))\n        }\n\n        if (keyboard) {\n          return this.PRIVATE.handleKeyboardSelection(evt.detail, completeOperation)\n        }\n\n        return this.PRIVATE.handleClickSelection(evt.detail, completeOperation)\n      },\n\n      parentStateChangeHandler: evt => {\n        this.emit('state.change', evt.detail)\n\n        let { name, value } = evt.detail\n\n        switch (name) {\n          case 'multiple':\n            if (!value && this.selectedOptions.length > 0) {\n              let index = this.selectedIndex\n\n              this.deselectAll()\n              this.emit('option.selected', { index })\n            }\n\n            break\n\n          default: return\n        }\n      }\n    })\n\n    this.UTIL.registerListeners(this, {\n      connected: () => {\n        this.PRIVATE.selectionStartIndex = this.selectedIndex >= 0 ? this.selectedIndex : 0\n\n        if (this.PRIVATE.isSlave) {\n          this.parentNode.on('state.change', this.PRIVATE.parentStateChangeHandler)\n        }\n      },\n\n      disconnected: () => {\n        if (this.PRIVATE.isSlave) {\n          this.parentNode.off('state.change', this.PRIVATE.parentStateChangeHandler)\n        }\n      },\n\n      'keydown.arrowUp': this.PRIVATE.arrowUpHandler,\n      'keydown.arrowDown': this.PRIVATE.arrowDownHandler,\n      'option.selected': this.PRIVATE.optionSelectionHandler\n    })\n  }\n\n  get selectedIndex () {\n    return this.selectedOptions.length > 0\n      ? this.selectedOptions.item(0).index\n      : -1\n  }\n\n  set selectedIndex (index) {\n    this.emit('option.selected', { index })\n  }\n\n  get selectionStartIndex () {\n    return this.PRIVATE.selectionStartIndex\n  }\n\n  set selectionStartIndex (value) {\n    this.UTIL.throwError({\n      type: 'readonly',\n      message: `\"selectionStartIndex\" cannot be set manually.`\n    })\n  }\n\n  addOptgroup (optgroup) {\n    let label = document.createElement('author-optgroup-label')\n    label.innerHTML = optgroup.getAttribute('label')\n\n    this.appendChild(label)\n    this.appendChild(optgroup)\n  }\n\n  addOption (option, index = null, dest = this) {\n    if (!customElements.get('author-option')) {\n      return this.UTIL.throwError({\n        type: 'dependency',\n        vars: {\n          name: 'author-option'\n        }\n      })\n    }\n\n    if (option instanceof Option) {\n      option = this.PRIVATE.generateOptionObject(option)\n    }\n\n    if (this.PRIVATE.isSlave) {\n      this.parentNode[`${option.index}`] = option.displayElement\n    }\n\n    if (index) {\n      dest.insertBefore(option.displayElement, dest.children.item(index))\n\n      this.options.splice(index, 0, option)\n\n      if (this.PRIVATE.isSlave) {\n        this.parentNode.sourceElement.add(option.sourceElement, index)\n      }\n\n    } else {\n      dest.appendChild(option.displayElement)\n      this.options.push(option)\n\n      if (this.PRIVATE.isSlave && !this.parentNode.sourceElement[this.options.length - 1]) {\n        this.parentNode.sourceElement.appendChild(option.sourceElement)\n      }\n    }\n\n    if (option.selected) {\n      if (!this.multiple) {\n        this.selectedIndex = option.index\n        return\n      }\n    }\n  }\n\n  addOptions (children) {\n    Array.from(children).forEach(child => {\n      let isElement = child instanceof HTMLElement\n\n      switch (child.nodeName) {\n        case 'OPTION':\n          return this.addOption(isElement ? this.PRIVATE.generateOptionObject(child) : child)\n\n        case 'OPTGROUP':\n          return this.addOptgroup(isElement ? this.PRIVATE.generateOptgroup(child) : child)\n\n        default:\n          return this.UTIL.printToConsole(`${child.nodeName.toLowerCase()} is not a valid child element for <author-select>. Removing...`, 'warning')\n      }\n    })\n  }\n\n  clear () {\n    while (this.lastChild) {\n      this.removeChild(this.lastChild)\n    }\n  }\n\n  deselect (option, updateList = true) {\n    if (typeof option === 'number') {\n      option = this.options[option]\n    }\n\n    option.selected = false\n\n    if (this.PRIVATE.isSlave) {\n      this.parentNode.selectedOptionsElement.remove(option, updateList)\n    }\n  }\n\n  deselectAll (showPlaceholder = true) {\n    this.options.filter(option => option.selected).forEach((option, index, options) => {\n      this.deselect(option, index = options.length - 1 && showPlaceholder)\n    })\n  }\n\n  hoverOption (index) {\n    this.unHoverAllOptions()\n    this.options[index].displayElement.hover = true\n  }\n\n  item (index) {\n    return this.options[index].displayElement\n  }\n\n  namedItem (value) {\n    let query = this.options.filter(option => {\n      let id = option.sourceElement.attributes.getNamedItem('id')\n      return id && id.value === value\n    })\n\n    if (!query.length) {\n      return null\n    }\n\n    return query[query.length - 1].displayElement\n  }\n\n  /**\n   * @method removeOptionByIndex\n   * @param  {Number}  [index=null]\n   * Index of option to remove\n   * @param  {Boolean} [destroy=true]\n   */\n  removeOptionByIndex (index = null) {\n    if (index === null || index >= this.options.length) {\n      return\n    }\n\n    this.options[index].remove()\n  }\n\n  unHoverAllOptions () {\n    this.options.forEach((option, index) => this.unHoverOption(index))\n  }\n\n  unHoverOption (index) {\n    this.options[index].displayElement.hover = false\n  }\n}\n\ncustomElements.define('author-options', AuthorOptionsElement)\n\nexport default AuthorOptionsElement\n"],"names":["AuthorOptionsElement","UTIL","defineProperties","cherryPickedOptions","private","form","readonly","get","_this","parentNode","displayOptions","PRIVATE","generateAuthorHTMLOptionsCollectionConstructor","options","map","option","displayElement","selectedIndex","element","before","addOption","generateOptionObject","index","removeOptionByIndex","hoveredIndex","findIndex","hover","isSlave","localName","lastSelectedIndex","multiple","default","selectedIndices","_toConsumableArray","selectedOptions","nodes","querySelectorAll","generateAuthorHTMLCollectionConstructor","Selection","push","this","includes","unshift","forEach","selected","length","selectionStartIndex","definePrivateMethods","arrowDownHandler","evt","emit","keyboard","shiftKey","detail","ctrlKey","metaKey","startIndex","hoverOption","arrowUpHandler","diffSelections","comparator","comparable","filter","_p","WeakMap","AuthorHTMLCollection","arr","add","remove","set","Symbol","toStringTag","generateOptgroup","optgroup","customElements","throwError","type","vars","name","surrogate","document","createElement","id","generateGuid","label","getAttribute","trim","message","setAttribute","Array","from","sourceElement","generateOptionConstructor","parent","key","defaultSelected","innerHTML","attributes","attr","value","_this3","removeAttribute","disabled","textContent","hasAttribute","text","bool","setAttr","getCurrentSelection","handleClickSelection","cb","selectedOption","clear","bounds","sort","a","b","slice","currentSelection","handleKeyboardSelection","selection","optionSelectionHandler","completeOperation","beforeChange","previous","next","displayElements","deselectAll","selectAll","parentStateChangeHandler","registerListeners","connected","on","disconnected","off","AuthorBaseElement","HTMLElement","appendChild","dest","Option","insertBefore","children","item","splice","child","isElement","nodeName","_this4","addOptgroup","printToConsole","toLowerCase","lastChild","removeChild","updateList","selectedOptionsElement","showPlaceholder","_this5","deselect","unHoverAllOptions","query","getNamedItem","_this6","unHoverOption","define"],"mappings":"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"}